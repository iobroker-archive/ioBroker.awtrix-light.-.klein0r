{
  "version": 3,
  "sources": ["../../src/lib/api.ts"],
  "sourcesContent": ["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { AwtrixLight } from '../main';\n\nexport namespace AwtrixApi {\n    export type App = {\n        text?: string;\n        textCase?: number;\n        topText?: boolean;\n        textOffset?: number;\n        center?: boolean;\n        color?: string;\n        gradient?: string;\n        blinkText?: number;\n        fadeText?: number;\n        background?: string;\n        rainbow?: boolean;\n        icon?: string;\n        pushIcon?: number;\n        repeat?: number;\n        duration?: number;\n        bar?: Array<number>;\n        line?: Array<number>;\n        autoscale?: boolean;\n        progress?: number;\n        progressC?: string;\n        progressBC?: string;\n        pos?: number;\n        draw?: Array<object>;\n        lifetime?: number;\n        lifetimeMode?: number;\n        noScroll?: boolean;\n        scrollSpeed?: number;\n        effect?: string;\n        effectSettings?: Array<object>;\n        save?: boolean;\n    };\n\n    export type Settings = {\n        key: string;\n        value: any;\n    };\n\n    export type Indicator = {\n        color?: string;\n        blink?: number;\n        fade?: number;\n    };\n\n    export type Moodlight = {\n        brightness?: number;\n        color?: string;\n    };\n\n    export class Client {\n        private adapter: AwtrixLight;\n        private axiosInstance: AxiosInstance | undefined = undefined;\n        private apiConnected: boolean = false;\n        private lastErrorCode: number = -1;\n\n        public constructor(adapter: AwtrixLight, ipAddress: string, port: number, httpTimeout: number, userName: string, userPassword: string) {\n            this.adapter = adapter;\n\n            this.adapter.log.info(`Starting - connecting to http://${ipAddress}:${port}/`);\n\n            let httpAuth: axios.AxiosBasicCredentials | undefined = undefined;\n            if (userName) {\n                httpAuth = {\n                    username: userName,\n                    password: userPassword,\n                };\n            }\n\n            this.axiosInstance = axios.create({\n                baseURL: `http://${ipAddress}:${port}/api/`,\n                timeout: httpTimeout * 1000 || 3000,\n                auth: httpAuth,\n                validateStatus: (status) => {\n                    return [200, 201].indexOf(status) > -1;\n                },\n                responseType: 'json',\n            });\n        }\n\n        public isConnected(): boolean {\n            return this.apiConnected;\n        }\n\n        public async getStatsAsync(): Promise<any> {\n            return new Promise<any>((resolve, reject) => {\n                this.requestAsync('stats', 'GET')\n                    .then(async (response) => {\n                        if (response.status === 200) {\n                            this.apiConnected = true;\n                            resolve(response.data);\n                        } else {\n                            reject(response);\n                        }\n                    })\n                    .catch((error) => {\n                        this.apiConnected = false;\n                        reject(error);\n                    });\n            });\n        }\n\n        public async removeAppAsync(name: string): Promise<boolean> {\n            return new Promise<boolean>((resolve, reject) => {\n                if (this.apiConnected) {\n                    this.appRequestAsync(name)\n                        .then((response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.adapter.log.debug(`[removeApp] Removed customApp app \"${name}\"`);\n                                resolve(true);\n                            } else {\n                                reject(`${response.status}: ${response.data}`);\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    reject('API not connected');\n                }\n            });\n        }\n\n        public async settingsRequestAsync(data: AwtrixApi.Settings): Promise<AxiosResponse> {\n            return this.requestAsync('settings', 'POST', { [data.key]: data.value });\n        }\n\n        public async indicatorRequestAsync(index: number, data?: AwtrixApi.Indicator): Promise<AxiosResponse> {\n            return this.requestAsync(`indicator${index}`, 'POST', data);\n        }\n\n        public async appRequestAsync(name: string, data?: AwtrixApi.App): Promise<AxiosResponse> {\n            return this.requestAsync(`custom?name=${name}`, 'POST', data);\n        }\n\n        public async requestAsync(url: string, method?: string, data?: object | string): Promise<AxiosResponse> {\n            return new Promise<AxiosResponse>((resolve, reject) => {\n                if (data) {\n                    this.adapter.log.debug(`sending \"${method}\" request to \"${url}\" with data: ${JSON.stringify(data)}`);\n                } else {\n                    this.adapter.log.debug(`sending \"${method}\" request to \"${url}\" without data`);\n                }\n\n                this.axiosInstance!.request({\n                    url,\n                    method,\n                    data,\n                    headers: {\n                        'Content-Type': typeof data === 'string' ? 'text/plain' : 'application/json',\n                    },\n                })\n                    .then((response) => {\n                        this.adapter.log.debug(`received ${response.status} response from \"${url}\" with content: ${JSON.stringify(response.data)}`);\n\n                        // no error - clear up reminder\n                        this.lastErrorCode = -1;\n\n                        resolve(response);\n                    })\n                    .catch((error) => {\n                        if (error.response) {\n                            // The request was made and the server responded with a status code\n\n                            if (error.response.status === 401) {\n                                this.adapter.log.warn('Unable to perform request. Looks like the device is protected with username / password. Check instance configuration!');\n                            } else {\n                                this.adapter.log.warn(`received ${error.response.status} response from ${url} with content: ${JSON.stringify(error.response.data)}`);\n                            }\n                        } else if (error.request) {\n                            // The request was made but no response was received\n                            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n                            // http.ClientRequest in node.js\n\n                            // avoid spamming of the same error when stuck in a reconnection loop\n                            if (error.code === this.lastErrorCode) {\n                                this.adapter.log.debug(error.message);\n                            } else {\n                                this.adapter.log.info(`error ${error.code} from ${url}: ${error.message}`);\n                                this.lastErrorCode = error.code;\n                            }\n                        } else {\n                            // Something happened in setting up the request that triggered an Error\n                            this.adapter.log.error(error.message);\n                        }\n\n                        reject(error);\n                    });\n            });\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AwtrixApi", "axios"]
}
