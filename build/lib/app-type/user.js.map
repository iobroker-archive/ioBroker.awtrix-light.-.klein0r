{
  "version": 3,
  "sources": ["../../../src/lib/app-type/user.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { DefaultApp } from '../adapter-config';\nimport { AwtrixApi } from '../api';\nimport { AppType as AbstractAppType } from './abstract';\n\nexport namespace AppType {\n    export abstract class UserApp extends AbstractAppType.AbstractApp {\n        private definition: DefaultApp;\n\n        protected ignoreNewValueForAppInTimeRange: number;\n        protected isVisible: boolean;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: DefaultApp) {\n            super(apiClient, adapter, definition.name);\n\n            this.definition = definition;\n            this.ignoreNewValueForAppInTimeRange = adapter.config.ignoreNewValueForAppInTimeRange;\n            this.isVisible = false;\n        }\n\n        public async init(): Promise<boolean> {\n            const appName = this.getName();\n            const appVisibleState = await this.adapter.getForeignStateAsync(`${this.objPrefix}.apps.${appName}.visible`);\n            this.isVisible = appVisibleState ? !!appVisibleState.val : true;\n\n            // Ack if changed while instance was stopped\n            if (appVisibleState && !appVisibleState?.ack) {\n                await this.adapter.setStateAsync(`apps.${appName}.visible`, { val: this.isVisible, ack: true, c: 'init' });\n            }\n\n            return this.isVisible;\n        }\n\n        public async refresh(): Promise<boolean> {\n            if (!this.isVisible && this.apiClient.isConnected()) {\n                // Hide app automatically\n                const appName = this.getName();\n                this.apiClient.removeAppAsync(appName).catch((error) => {\n                    this.adapter.log.warn(`[refreshApp] Unable to remove hidden app \"${appName}\": ${error}`);\n                });\n            }\n\n            return this.isVisible && this.apiClient.isConnected();\n        }\n\n        public async createObjects(): Promise<void> {\n            await super.createObjects();\n\n            const appName = this.getName();\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.visible`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Visible',\n                        de: 'Sichtbar',\n                        ru: '\u0412\u0438\u0434\u0438\u043C\u044B\u0439',\n                        pt: 'Vis\u00EDvel',\n                        nl: 'Vertaling',\n                        fr: 'Visible',\n                        it: 'Visibile',\n                        es: 'Visible',\n                        pl: 'Widoczny',\n                        uk: '\u0412\u0438\u0431\u0440\u0430\u043D\u0456',\n                        'zh-cn': '\u4E0D\u53EF\u6297\u8FA9',\n                    },\n                    type: 'boolean',\n                    role: 'switch.enable',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: true,\n                },\n                native: {},\n            });\n\n            if (!this.isMainInstance()) {\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.visible`);\n            }\n        }\n\n        public async unloadAsync(): Promise<void> {\n            if (this.adapter.config.removeAppsOnStop) {\n                this.adapter.log.info(`[onUnload] Deleting app on awtrix light with name \"${this.definition.name}\"`);\n\n                try {\n                    await this.apiClient.removeAppAsync(this.definition.name).catch((error) => {\n                        this.adapter.log.warn(`Unable to remove unknown app \"${this.definition.name}\": ${error}`);\n                    });\n                } catch (error) {\n                    this.adapter.log.error(`[onUnload] Unable to delete app ${this.definition.name}: ${error}`);\n                }\n            }\n        }\n\n        protected override async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            // Handle all states for user apps\n            if (id && state && !state.ack) {\n                const appName = this.getName();\n                const idOwnNamespace = this.getObjIdOwnNamespace(id);\n\n                if (id === `${this.objPrefix}.apps.${appName}.visible`) {\n                    if (state.val !== this.isVisible) {\n                        this.adapter.log.debug(`[onStateChange] ${appName}: Visibility of app ${appName} changed to ${state.val}`);\n\n                        this.isVisible = !!state.val;\n\n                        await this.refresh();\n                        await this.adapter.setStateAsync(idOwnNamespace, { val: state.val, ack: true, c: `onStateChange ${this.objPrefix}` });\n                    } else {\n                        this.adapter.log.debug(`[onStateChange] ${appName}: Visibility of app \"${appName}\" IGNORED (not changed): ${state.val}`);\n\n                        await this.adapter.setStateAsync(idOwnNamespace, { val: state.val, ack: true, c: `onStateChange ${this.objPrefix} (unchanged)` });\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AppType", "AbstractAppType"]
}
