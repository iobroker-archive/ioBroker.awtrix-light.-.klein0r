{
  "version": 3,
  "sources": ["../../../src/lib/app-type/abstract.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../main';\nimport { AwtrixApi } from '../api';\n\nexport namespace AppType {\n    export abstract class AbstractApp {\n        private name: string;\n\n        protected apiClient: AwtrixApi.Client;\n        protected adapter: AwtrixLight;\n\n        protected objPrefix: string;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, name: string) {\n            this.name = name;\n\n            this.apiClient = apiClient;\n            this.adapter = adapter;\n\n            if (this.adapter.isMainInstance()) {\n                this.objPrefix = this.adapter.namespace;\n            } else {\n                this.objPrefix = this.adapter.config.foreignSettingsInstance;\n            }\n\n            adapter.on('stateChange', this.onStateChange.bind(this));\n            adapter.on('objectChange', this.onObjectChange.bind(this));\n        }\n\n        public abstract getDescription(): string;\n\n        public abstract getIconForObjectTree(): string;\n\n        public getName(): string {\n            return this.name;\n        }\n\n        public isMainInstance(): boolean {\n            return this.adapter.isMainInstance();\n        }\n\n        protected getObjIdOwnNamespace(id: string): string {\n            return this.adapter.removeNamespace(this.isMainInstance() ? id : id.replace(this.objPrefix, this.adapter.namespace));\n        }\n\n        private hasOwnActivateState(): boolean {\n            return this.isMainInstance() || !this.adapter.config.foreignSettingsInstanceActivateApps;\n        }\n\n        public async createObjects(): Promise<void> {\n            const appName = this.getName();\n\n            this.adapter.log.debug(`[createObjects] Creating objects for app \"${appName}\" (${this.isMainInstance() ? 'main' : this.objPrefix})`);\n\n            if (this.hasOwnActivateState()) {\n                await this.adapter.extendObject(`apps.${appName}.activate`, {\n                    type: 'state',\n                    common: {\n                        name: {\n                            en: 'Activate',\n                            de: 'Aktivieren',\n                            ru: '\u0410\u043A\u0442\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u0442\u044C',\n                            pt: 'Ativar',\n                            nl: 'Activeren',\n                            fr: 'Activer',\n                            it: 'Attivare',\n                            es: 'Activar',\n                            pl: 'Aktywuj',\n                            uk: '\u0410\u043A\u0442\u0438\u0432\u0443\u0432\u0430\u0442\u0438',\n                            'zh-cn': '\u542F\u7528',\n                        },\n                        type: 'boolean',\n                        role: 'button',\n                        read: false,\n                        write: true,\n                    },\n                    native: {},\n                });\n            } else {\n                await this.adapter.delObjectAsync(`apps.${appName}.activate`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.activate`);\n            }\n        }\n\n        private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            const appName = this.getName();\n\n            if (id) {\n                this.adapter.log.debug(`[onStateChange] ${appName}: State change \"${id}\": ${JSON.stringify(state)}`);\n\n                // Handle default states for all apps\n                if (state && !state.ack) {\n                    // activate app\n                    if (id === `${this.hasOwnActivateState() ? this.adapter.namespace : this.objPrefix}.apps.${appName}.activate`) {\n                        if (state.val) {\n                            this.apiClient!.requestAsync('switch', 'POST', { name: appName }).catch((error) => {\n                                this.adapter.log.warn(`[onStateChange] ${appName}: (switch) Unable to execute action: ${error}`);\n                            });\n                        } else {\n                            this.adapter.log.warn(`[onStateChange] ${appName}: Received invalid value for state ${id}`);\n                        }\n                    }\n                }\n            }\n\n            await this.stateChanged(id, state);\n        }\n\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        protected async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            // override\n        }\n\n        private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n            await this.objectChanged(id, obj);\n        }\n\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        protected async objectChanged(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n            // override\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,IAAU;AAAA,CAAV,CAAUA,aAAV;AAAA,EACI,MAAe,YAAY;AAAA,IACtB;AAAA,IAEE;AAAA,IACA;AAAA,IAEA;AAAA,IAEH,YAAY,WAA6B,SAAsB,MAAc;AAChF,WAAK,OAAO;AAEZ,WAAK,YAAY;AACjB,WAAK,UAAU;AAEf,UAAI,KAAK,QAAQ,eAAe,GAAG;AAC/B,aAAK,YAAY,KAAK,QAAQ;AAAA,MAClC,OAAO;AACH,aAAK,YAAY,KAAK,QAAQ,OAAO;AAAA,MACzC;AAEA,cAAQ,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACvD,cAAQ,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AAAA,IAC7D;AAAA,IAMO,UAAkB;AACrB,aAAO,KAAK;AAAA,IAChB;AAAA,IAEO,iBAA0B;AAC7B,aAAO,KAAK,QAAQ,eAAe;AAAA,IACvC;AAAA,IAEU,qBAAqB,IAAoB;AAC/C,aAAO,KAAK,QAAQ,gBAAgB,KAAK,eAAe,IAAI,KAAK,GAAG,QAAQ,KAAK,WAAW,KAAK,QAAQ,SAAS,CAAC;AAAA,IACvH;AAAA,IAEQ,sBAA+B;AACnC,aAAO,KAAK,eAAe,KAAK,CAAC,KAAK,QAAQ,OAAO;AAAA,IACzD;AAAA,IAEA,MAAa,gBAA+B;AACxC,YAAM,UAAU,KAAK,QAAQ;AAE7B,WAAK,QAAQ,IAAI,MAAM,6CAA6C,OAAO,MAAM,KAAK,eAAe,IAAI,SAAS,KAAK,SAAS,GAAG;AAEnI,UAAI,KAAK,oBAAoB,GAAG;AAC5B,cAAM,KAAK,QAAQ,aAAa,QAAQ,OAAO,aAAa;AAAA,UACxD,MAAM;AAAA,UACN,QAAQ;AAAA,YACJ,MAAM;AAAA,cACF,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,IAAI;AAAA,cACJ,SAAS;AAAA,YACb;AAAA,YACA,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,UACA,QAAQ,CAAC;AAAA,QACb,CAAC;AAAA,MACL,OAAO;AACH,cAAM,KAAK,QAAQ,eAAe,QAAQ,OAAO,WAAW;AAC5D,cAAM,KAAK,QAAQ,4BAA4B,GAAG,KAAK,SAAS,SAAS,OAAO,WAAW;AAAA,MAC/F;AAAA,IACJ;AAAA,IAEA,MAAc,cAAc,IAAY,OAAyD;AAC7F,YAAM,UAAU,KAAK,QAAQ;AAE7B,UAAI,IAAI;AACJ,aAAK,QAAQ,IAAI,MAAM,mBAAmB,OAAO,mBAAmB,EAAE,MAAM,KAAK,UAAU,KAAK,CAAC,EAAE;AAGnG,YAAI,SAAS,CAAC,MAAM,KAAK;AAErB,cAAI,OAAO,GAAG,KAAK,oBAAoB,IAAI,KAAK,QAAQ,YAAY,KAAK,SAAS,SAAS,OAAO,aAAa;AAC3G,gBAAI,MAAM,KAAK;AACX,mBAAK,UAAW,aAAa,UAAU,QAAQ,EAAE,MAAM,QAAQ,CAAC,EAAE,MAAM,CAAC,UAAU;AAC/E,qBAAK,QAAQ,IAAI,KAAK,mBAAmB,OAAO,wCAAwC,KAAK,EAAE;AAAA,cACnG,CAAC;AAAA,YACL,OAAO;AACH,mBAAK,QAAQ,IAAI,KAAK,mBAAmB,OAAO,sCAAsC,EAAE,EAAE;AAAA,YAC9F;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,KAAK,aAAa,IAAI,KAAK;AAAA,IACrC;AAAA;AAAA,IAGA,MAAgB,aAAa,IAAY,OAAyD;AAAA,IAElG;AAAA,IAEA,MAAc,eAAe,IAAY,KAAwD;AAC7F,YAAM,KAAK,cAAc,IAAI,GAAG;AAAA,IACpC;AAAA;AAAA,IAGA,MAAgB,cAAc,IAAY,KAAwD;AAAA,IAElG;AAAA,EACJ;AApHO,EAAAA,SAAe;AAAA,GADT;",
  "names": ["AppType"]
}
