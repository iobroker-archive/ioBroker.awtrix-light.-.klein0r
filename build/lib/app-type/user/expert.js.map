{
  "version": 3,
  "sources": ["../../../../src/lib/app-type/user/expert.ts"],
  "sourcesContent": ["import { AwtrixLight } from '../../../main';\nimport { ExpertApp } from '../../adapter-config';\nimport { AwtrixApi } from '../../api';\nimport { AppType as UserAppType } from '../user';\n\nexport namespace AppType {\n    export class Expert extends UserAppType.UserApp {\n        private appDefinition: ExpertApp;\n        private appStates: { [key: string]: ioBroker.StateValue };\n        private refreshTimeout: ioBroker.Timeout | undefined;\n\n        public constructor(apiClient: AwtrixApi.Client, adapter: AwtrixLight, definition: ExpertApp) {\n            super(apiClient, adapter, definition);\n\n            this.appDefinition = definition;\n            this.appStates = {};\n            this.refreshTimeout = undefined;\n        }\n\n        public override getDescription(): string {\n            return 'expert';\n        }\n\n        public override async init(): Promise<boolean> {\n            const appName = this.getName();\n\n            const appObjects = await this.adapter.getObjectViewAsync('system', 'state', {\n                startkey: `${this.objPrefix}.apps.${appName}.`,\n                endkey: `${this.objPrefix}.apps.${appName}.\\u9999`,\n            });\n\n            // Find all available settings objects with settingsKey\n            for (const appObj of appObjects.rows) {\n                if (appObj.value.type === 'state' && appObj.value?.native?.attribute) {\n                    const appState = await this.adapter.getForeignStateAsync(appObj.id);\n                    if (appState) {\n                        this.appStates[appObj.value.native.attribute] = appState.val;\n\n                        // Copy values of main instance\n                        if (!this.isMainInstance()) {\n                            const idOwnNamespace = this.getObjIdOwnNamespace(appObj.id);\n                            await this.adapter.setStateAsync(idOwnNamespace, { val: appState.val, ack: true, c: 'init' });\n                        }\n                    }\n                }\n            }\n\n            this.adapter.log.debug(`[initExpertApp] current states of app \"${appName}\": ${JSON.stringify(this.appStates)}`);\n\n            return super.init();\n        }\n\n        public override async refresh(): Promise<boolean> {\n            let refreshed = false;\n\n            if (await super.refresh()) {\n                this.adapter.log.debug(`[refresh] Refreshing app with values \"${this.appDefinition.name}\": ${JSON.stringify(this.appStates)}`);\n\n                const app: AwtrixApi.App = {\n                    text: typeof this.appStates.text === 'string' ? this.appStates.text : '',\n                    textCase: 2, // show as sent\n                    color: typeof this.appStates.color === 'string' ? this.appStates.color : '#FFFFFF',\n                    background: typeof this.appStates.background === 'string' ? this.appStates.background : '#000000',\n                    icon: typeof this.appStates.icon === 'string' ? this.appStates.icon : '',\n                    duration: typeof this.appStates.duration === 'number' ? this.appStates.duration : 0,\n                    pos: this.appDefinition.position,\n                };\n\n                if (this.appStates.progress && typeof this.appStates.progress === 'number') {\n                    if (this.appStates.progress >= 0 && this.appStates.progress <= 100) {\n                        app.progress = this.appStates.progress;\n\n                        // colors\n                        app.progressC = typeof this.appStates.progressC === 'string' ? this.appStates.progressC : '#00FF00';\n                        app.progressBC = typeof this.appStates.progressBC === 'string' ? this.appStates.progressBC : '#FFFFFF';\n                    }\n                }\n\n                await this.apiClient!.appRequestAsync(this.appDefinition.name, app).catch((error) => {\n                    this.adapter.log.warn(`(custom?name=${this.appDefinition.name}) Unable to update custom app \"${this.appDefinition.name}\": ${error}`);\n                });\n\n                refreshed = true;\n            }\n\n            return refreshed;\n        }\n\n        public async createObjects(): Promise<void> {\n            await super.createObjects();\n\n            const appName = this.getName();\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.text`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Text',\n                        de: 'Text',\n                        ru: '\u0422\u0435\u043A\u0441\u0442',\n                        pt: 'Texto',\n                        nl: 'Text',\n                        fr: 'Texte',\n                        it: 'Testo',\n                        es: 'Texto',\n                        pl: 'Tekst',\n                        uk: '\u0413\u043E\u043B\u043E\u0432\u043D\u0430',\n                        'zh-cn': '\u6848\u6587',\n                    },\n                    type: 'string',\n                    role: 'text',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '',\n                },\n                native: {\n                    attribute: 'text',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.textColor`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Text color',\n                        de: 'Textfarbe',\n                        ru: '\u0422\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439 \u0446\u0432\u0435\u0442',\n                        pt: 'Cor do texto',\n                        nl: 'Tekstkleur',\n                        fr: 'Couleur du texte',\n                        it: 'Colore del testo',\n                        es: 'Color de texto',\n                        pl: 'Kolor tekstu',\n                        uk: '\u041A\u043E\u043B\u0456\u0440 \u0442\u0435\u043A\u0441\u0442\u0443',\n                        'zh-cn': '\u6587\u672C\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '#FFFFFF',\n                },\n                native: {\n                    attribute: 'color',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.backgroundColor`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Background color',\n                        de: 'Hintergrundfarbe',\n                        ru: '\u0424\u043E\u043D\u043E\u0432\u044B\u0439 \u0446\u0432\u0435\u0442',\n                        pt: 'Cor de fundo',\n                        nl: 'Achtergrondkleur',\n                        fr: 'Couleur de fond',\n                        it: 'Colore dello sfondo',\n                        es: 'Color de fondo',\n                        pl: 'Kolor t\u0142a',\n                        uk: '\u041A\u043E\u043B\u0456\u0440 \u0444\u043E\u043D\u0443',\n                        'zh-cn': '\u80CC\u666F\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '#000000',\n                },\n                native: {\n                    attribute: 'background',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.icon`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Icon',\n                        de: 'Symbol',\n                        ru: '\u0418\u043C\u044F',\n                        pt: '\u00CDcone',\n                        nl: 'Icoon',\n                        fr: 'Ic\u00F4ne',\n                        it: 'Icona',\n                        es: 'Icono',\n                        pl: 'Ikona',\n                        uk: '\u0437\u043D\u0430\u0447\u043E\u043A',\n                        'zh-cn': '\u56FE\u6807',\n                    },\n                    type: 'string',\n                    role: 'text',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '',\n                },\n                native: {\n                    attribute: 'icon',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.duration`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Duration',\n                        de: 'Dauer',\n                        ru: '\u041F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C',\n                        pt: 'Dura\u00E7\u00E3o',\n                        nl: 'Duur',\n                        fr: 'Dur\u00E9e',\n                        it: 'Durata',\n                        es: 'Duraci\u00F3n',\n                        pl: 'Czas trwania',\n                        uk: '\u0422\u0440\u0438\u0432\u0430\u043B\u0456\u0441\u0442\u044C',\n                        'zh-cn': '\u4F1A\u671F',\n                    },\n                    type: 'number',\n                    role: 'value',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: 0,\n                    unit: 'sec',\n                },\n                native: {\n                    attribute: 'duration',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.progress`, {\n                type: 'folder',\n                common: {\n                    name: {\n                        en: 'Progress bar',\n                        de: 'Fortschrittsleiste',\n                        ru: '\u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441',\n                        pt: 'Barra de progresso',\n                        nl: 'Voortgangsbalk',\n                        fr: 'Barre de progression',\n                        it: 'Barra di avanzamento',\n                        es: 'Progresos',\n                        pl: 'Pasek post\u0119pu',\n                        uk: '\u041F\u0440\u043E\u0433\u0440\u0435\u0441 \u0431\u0430\u0440',\n                        'zh-cn': '\u8FDB\u5EA6\u680F',\n                    },\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.progress.percent`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Progress',\n                        de: 'Fortschritt',\n                        ru: '\u041F\u0440\u043E\u0433\u0440\u0435\u0441\u0441',\n                        pt: 'Progressos',\n                        nl: 'Voortgang',\n                        fr: 'Progr\u00E8s accomplis',\n                        it: 'Progressi',\n                        es: 'Progresos',\n                        pl: 'Post\u0119py',\n                        uk: '\u041F\u0440\u043E\u0433\u0440\u0435\u0441',\n                        'zh-cn': '\u8FDB\u5C55',\n                    },\n                    type: 'number',\n                    role: 'value',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: 0,\n                    unit: '%',\n                    min: 0,\n                    max: 100,\n                },\n                native: {\n                    attribute: 'progress',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.progress.color`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Color',\n                        de: 'Farbe',\n                        ru: '\u0426\u0432\u0435\u0442',\n                        pt: 'Cor',\n                        nl: 'Kleur',\n                        fr: 'Couleur',\n                        it: 'Colore',\n                        es: 'Color',\n                        pl: 'Kolor',\n                        uk: '\u041A\u043E\u043B\u0456\u0440',\n                        'zh-cn': '\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '#00FF00',\n                },\n                native: {\n                    attribute: 'progressC',\n                },\n            });\n\n            await this.adapter.extendObjectAsync(`apps.${appName}.progress.backgroundColor`, {\n                type: 'state',\n                common: {\n                    name: {\n                        en: 'Background color',\n                        de: 'Hintergrundfarbe',\n                        ru: '\u0424\u043E\u043D\u043E\u0432\u044B\u0439 \u0446\u0432\u0435\u0442',\n                        pt: 'Cor de fundo',\n                        nl: 'Achtergrondkleur',\n                        fr: 'Couleur de fond',\n                        it: 'Colore dello sfondo',\n                        es: 'Color de fondo',\n                        pl: 'Kolor t\u0142a',\n                        uk: '\u041A\u043E\u043B\u0456\u0440 \u0444\u043E\u043D\u0443',\n                        'zh-cn': '\u80CC\u666F\u989C\u8272',\n                    },\n                    type: 'string',\n                    role: 'level.color.rgb',\n                    read: true,\n                    write: this.isMainInstance(),\n                    def: '#FFFFFF',\n                },\n                native: {\n                    attribute: 'progressBC',\n                },\n            });\n\n            if (!this.isMainInstance()) {\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.text`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.textColor`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.backgroundColor`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.icon`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.duration`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.progress.percent`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.progress.color`);\n                await this.adapter.subscribeForeignStatesAsync(`${this.objPrefix}.apps.${appName}.progress.backgroundColor`);\n            }\n        }\n\n        protected override async stateChanged(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n            await super.stateChanged(id, state);\n\n            // Handle default states for all apps\n            if (id && state && !state.ack) {\n                const appName = this.getName();\n                const idOwnNamespace = this.getObjIdOwnNamespace(id);\n\n                if (id.startsWith(`${this.objPrefix}.apps.${appName}.`)) {\n                    const obj = await this.adapter.getForeignObjectAsync(id);\n\n                    if (obj && obj?.native?.attribute) {\n                        const attr = obj.native.attribute as string;\n\n                        if (this.appStates[attr] !== state.val) {\n                            this.adapter.log.debug(`[onStateChange] New value for expert app \"${appName}\": \"${state.val}\" (${obj?.native?.attribute})`);\n\n                            this.appStates[attr] = state.val;\n\n                            if (!this.refreshTimeout) {\n                                this.refreshTimeout = this.adapter.setTimeout(async () => {\n                                    this.refreshTimeout = undefined;\n\n                                    await this.refresh();\n                                }, 100);\n                            }\n\n                            await this.adapter.setStateAsync(idOwnNamespace, { val: state.val, ack: true, c: `onStateChange ${this.objPrefix}` });\n                        } else {\n                            this.adapter.log.debug(`[onStateChange] New value for expert app \"${appName}\" IGNORED (not changed): \"${state.val}\" (${obj?.native?.attribute})`);\n\n                            await this.adapter.setStateAsync(idOwnNamespace, { val: state.val, ack: true, c: `onStateChange ${this.objPrefix} (unchanged)` });\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["AppType", "UserAppType"]
}
