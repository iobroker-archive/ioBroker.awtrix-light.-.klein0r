{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport { AxiosResponse } from 'axios';\n\nimport { rgb565to888Str } from './lib/color-convert';\n\nimport { AwtrixApi } from './lib/api';\nimport { AppType as AppTypeAbstract } from './lib/app-type/abstract';\nimport { AppType as AppTypeNative } from './lib/app-type/native';\nimport { AppType as AppTypeUser } from './lib/app-type/user';\nimport { AppType as AppTypeCustom } from './lib/app-type/user/custom';\nimport { AppType as AppTypeExpert } from './lib/app-type/user/expert';\nimport { AppType as AppTypeHistory } from './lib/app-type/user/history';\n\nconst NATIVE_APPS = ['Time', 'Date', 'Temperature', 'Humidity', 'Battery'];\n\nexport class AwtrixLight extends utils.Adapter {\n    private _isMainInstance: boolean;\n\n    private currentVersion: string | undefined;\n    private supportedVersion: string;\n    private displayedVersionWarning: boolean;\n\n    private apiClient: AwtrixApi.Client | null;\n    private apiConnected: boolean;\n    private refreshStateTimeout: ioBroker.Timeout | undefined;\n    private downloadScreenContentInterval: ioBroker.Interval | undefined;\n\n    private apps: Array<AppTypeAbstract.AbstractApp>;\n    private backgroundEffects: Array<string>;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'awtrix-light',\n            useFormatDate: true,\n        });\n\n        this._isMainInstance = true;\n\n        this.currentVersion = undefined;\n        this.supportedVersion = '0.96';\n        this.displayedVersionWarning = false;\n\n        this.apiClient = null;\n        this.apiConnected = false;\n\n        this.refreshStateTimeout = undefined;\n        this.downloadScreenContentInterval = undefined;\n\n        this.apps = [];\n        this.backgroundEffects = [\n            'Fade',\n            'MovingLine',\n            'BrickBreaker',\n            'PingPong',\n            'Radar',\n            'Checkerboard',\n            'Fireworks',\n            'PlasmaCloud',\n            'Ripple',\n            'Snake',\n            'Pacifica',\n            'TheaterChase',\n            'Plasma',\n            'Matrix',\n            'SwirlIn',\n            'SwirlOut',\n            'LookingEyes',\n            'TwinklingStars',\n            'ColorWaves',\n        ];\n\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n        this.setApiConnected(false);\n\n        await this.upgradeFromPreviousVersion();\n        await this.subscribeStatesAsync('*');\n\n        if (!this.config.awtrixIp) {\n            this.log.error(`IP address not configured - please check instance configuration and restart`);\n            return;\n        } else {\n            this.apiClient = new AwtrixApi.Client(this, this.config.awtrixIp, 80, this.config.httpTimeout, this.config.userName, this.config.userPassword);\n        }\n\n        if (this.config.foreignSettingsInstance !== '' && this.config.foreignSettingsInstance !== this.namespace) {\n            this._isMainInstance = false;\n\n            await this.subscribeForeignObjectsAsync(`system.adapter.${this.config.foreignSettingsInstance}`);\n            await this.importForeignSettings();\n        }\n\n        // Init all apps\n        for (const nativeAppName of NATIVE_APPS) {\n            if (!this.findAppWithName(nativeAppName)) {\n                this.apps.push(new AppTypeNative.Native(this.apiClient, this, nativeAppName));\n            }\n        }\n\n        let pos = 0;\n\n        for (const customApp of this.config.customApps) {\n            if (!this.findAppWithName(customApp.name)) {\n                if (!this.config.customPositions) {\n                    customApp.position = pos++;\n                }\n                this.apps.push(new AppTypeCustom.Custom(this.apiClient, this, customApp));\n            } else {\n                this.log.warn(`App with name ${customApp.name} already exists. Skipping custom app!`);\n            }\n        }\n\n        for (const historyApp of this.config.historyApps) {\n            if (!this.findAppWithName(historyApp.name)) {\n                if (!this.config.customPositions) {\n                    historyApp.position = pos++;\n                }\n                this.apps.push(new AppTypeHistory.History(this.apiClient, this, historyApp));\n            } else {\n                this.log.warn(`App with name ${historyApp.name} already exists. Skipping history app!`);\n            }\n        }\n\n        for (const expertApp of this.config.expertApps) {\n            if (!this.findAppWithName(expertApp.name)) {\n                if (!this.config.customPositions) {\n                    expertApp.position = pos++;\n                }\n                this.apps.push(new AppTypeExpert.Expert(this.apiClient, this, expertApp));\n            } else {\n                this.log.warn(`App with name ${expertApp.name} already exists. Skipping expert app!`);\n            }\n        }\n\n        this.refreshState();\n    }\n\n    private async upgradeFromPreviousVersion(): Promise<void> {\n        this.log.debug(`Upgrading objects from previous version`);\n\n        await this.delObjectAsync('apps.eyes', { recursive: true }); // eyes app was removed in firmware 0.71\n\n        await this.extendObjectAsync('settings.calendarHeaderColor', {\n            common: {\n                type: 'string',\n                role: 'level.color.rgb',\n                def: '#FF0000',\n            },\n        });\n\n        await this.extendObjectAsync('settings.calendarBodyColor', {\n            common: {\n                type: 'string',\n                role: 'level.color.rgb',\n                def: '#FFFFFF',\n            },\n        });\n\n        await this.extendObjectAsync('settings.calendarTextColor', {\n            common: {\n                type: 'string',\n                role: 'level.color.rgb',\n                def: '#000000',\n            },\n        });\n    }\n\n    private async importForeignSettings(): Promise<void> {\n        try {\n            this.log.info(`Using settings of other instance: ${this.config.foreignSettingsInstance}`);\n\n            const instanceObj = await this.getForeignObjectAsync(`system.adapter.${this.config.foreignSettingsInstance}`);\n\n            if (instanceObj && instanceObj.native) {\n                if (!instanceObj.native?.foreignSettingsInstance) {\n                    this.config.customApps = instanceObj.native.customApps;\n                    this.config.ignoreNewValueForAppInTimeRange = instanceObj.native.ignoreNewValueForAppInTimeRange;\n                    this.config.historyApps = instanceObj.native.historyApps;\n                    this.config.historyAppsRefreshInterval = instanceObj.native.historyAppsRefreshInterval;\n                    this.config.autoDeleteForeignApps = instanceObj.native.autoDeleteForeignApps;\n                    this.config.removeAppsOnStop = instanceObj.native.removeAppsOnStop;\n                    this.config.expertApps = instanceObj.native.expertApps;\n                    this.config.customPositions = instanceObj.native.customPositions;\n\n                    this.log.debug(`[importForeignSettings] Copied settings from foreign instance \"system.adapter.${this.config.foreignSettingsInstance}\"`);\n                } else {\n                    throw new Error(`Foreign instance uses instance settings of ${instanceObj?.native?.foreignSettingsInstance} - (nothing imported)`);\n                }\n            } else {\n                throw new Error(`Unable to load instance settings of ${instanceObj?.native?.foreignSettingsInstance} (nothing imported)`);\n            }\n        } catch (err) {\n            this.log.error(`Unable to import settings of other instance: ${err}`);\n        }\n    }\n\n    public isMainInstance(): boolean {\n        return this._isMainInstance;\n    }\n\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (id && state && !state.ack) {\n            const idNoNamespace = this.removeNamespace(id);\n\n            this.log.debug(`state ${idNoNamespace} changed: ${state.val}`);\n\n            if (this.apiClient!.isConnected()) {\n                if (idNoNamespace.startsWith('settings.')) {\n                    this.log.debug(`changing setting ${idNoNamespace} power to ${state.val}`);\n\n                    const settingsObj = await this.getObjectAsync(idNoNamespace);\n                    if (settingsObj && settingsObj.native?.settingsKey) {\n                        this.apiClient!.settingsRequestAsync({ key: settingsObj.native.settingsKey, value: state.val })\n                            .then(async (response) => {\n                                if (response.status === 200 && response.data === 'OK') {\n                                    await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                }\n\n                                await this.refreshSettings();\n                            })\n                            .catch((error) => {\n                                this.log.warn(`(settings) Unable to execute action: ${error}`);\n                            });\n                    } else {\n                        this.log.warn(`Unable to change setting of ${id} - settingsKey not found`);\n                    }\n                } else if (idNoNamespace === 'display.power') {\n                    this.log.debug(`changing display power to ${state.val}`);\n\n                    this.apiClient!.requestAsync('power', 'POST', { power: state.val })\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(power) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'device.sleep') {\n                    this.log.debug(`enable sleep mode of device for ${state.val} seconds`);\n\n                    this.apiClient!.requestAsync('sleep', 'POST', { sleep: state.val })\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                this.setApiConnected(false);\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(power) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace.startsWith('display.moodlight.')) {\n                    this.updateMoodlightByStates()\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(moodlight) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'device.update') {\n                    this.log.info('performing firmware update');\n\n                    this.apiClient!.requestAsync('doupdate', 'POST')\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.log.info('started firmware update');\n                                this.setApiConnected(false);\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(doupdate) Unable to execute firmware update (maybe this is already the newest version): ${error}`);\n                        });\n                } else if (idNoNamespace === 'device.reboot') {\n                    this.apiClient!.requestAsync('reboot', 'POST')\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.log.info('rebooting device');\n                                this.setApiConnected(false);\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(reboot) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'notification.dismiss') {\n                    this.apiClient!.requestAsync('notify/dismiss', 'POST')\n                        .then(async (response) => {\n                            if (response.status === 200 && response.data === 'OK') {\n                                this.log.info('dismissed notifications');\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.warn(`(notify/dismiss) Unable to execute action: ${error}`);\n                        });\n                } else if (idNoNamespace === 'apps.next') {\n                    this.log.debug('switching to next app');\n\n                    this.apiClient!.requestAsync('nextapp', 'POST').catch((error) => {\n                        this.log.warn(`(nextapp) Unable to execute action: ${error}`);\n                    });\n                } else if (idNoNamespace === 'apps.prev') {\n                    this.log.debug('switching to previous app');\n\n                    this.apiClient!.requestAsync('previousapp', 'POST').catch((error) => {\n                        this.log.warn(`(previousapp) Unable to execute action: ${error}`);\n                    });\n                } else if (idNoNamespace.match(/indicator\\.[0-9]{1}\\..*$/g)) {\n                    const matches = idNoNamespace.match(/indicator\\.([0-9]{1})\\.(.*)$/);\n                    const indicatorNo = matches ? parseInt(matches[1]) : undefined;\n                    const action = matches ? matches[2] : undefined;\n\n                    this.log.debug(`Changed indicator ${indicatorNo} with action ${action}`);\n\n                    if (indicatorNo && indicatorNo >= 1) {\n                        this.updateIndicatorByStates(indicatorNo)\n                            .then(async (response) => {\n                                if (response.status === 200 && response.data === 'OK') {\n                                    await this.setStateAsync(idNoNamespace, { val: state.val, ack: true });\n                                }\n                            })\n                            .catch((error) => {\n                                this.log.warn(`(indicator) Unable to perform action: ${error}`);\n                            });\n                    }\n                }\n            } else {\n                this.log.warn(`Unable to perform action for ${idNoNamespace} - API is not connected (device not reachable?)`);\n            }\n        }\n    }\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    private async onObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        // Imported settings changed\n        if (!this.isMainInstance() && id && id == `system.adapter.${this.config.foreignSettingsInstance}`) {\n            await this.importForeignSettings();\n            this.restart();\n        }\n    }\n\n    private onMessage(obj: ioBroker.Message): void {\n        this.log.debug(`[onMessage] received command \"${obj.command}\" with message: ${JSON.stringify(obj.message)}`);\n\n        if (obj && obj.message) {\n            if (obj.command === 'getBackgroundEffects') {\n                this.sendTo(\n                    obj.from,\n                    obj.command,\n                    this.backgroundEffects.map((v) => ({ value: v, label: v })),\n                    obj.callback,\n                );\n            } else if (obj.command === 'notification' && typeof obj.message === 'object') {\n                // Notification\n                if (this.apiClient!.isConnected()) {\n                    const msgFiltered: AwtrixApi.App = Object.fromEntries(Object.entries(obj.message).filter(([_, v]) => v !== null));\n\n                    // Remove repeat if <= 0\n                    if (msgFiltered.repeat !== undefined && msgFiltered.repeat <= 0) {\n                        delete msgFiltered.repeat;\n                    }\n\n                    // Remove duration if <= 0\n                    if (msgFiltered.duration !== undefined && msgFiltered.duration <= 0) {\n                        delete msgFiltered.duration;\n                    }\n\n                    this.apiClient!.requestAsync('notify', 'POST', msgFiltered)\n                        .then((response) => {\n                            this.sendTo(obj.from, obj.command, { error: null, data: response.data }, obj.callback);\n                        })\n                        .catch((error) => {\n                            this.sendTo(obj.from, obj.command, { error }, obj.callback);\n                        });\n                } else {\n                    this.sendTo(obj.from, obj.command, { error: 'API is not connected (device offline ?)' }, obj.callback);\n                }\n            } else if (obj.command === 'sound' && typeof obj.message === 'object') {\n                // Sound\n                if (this.apiClient!.isConnected()) {\n                    const msgFiltered = Object.fromEntries(Object.entries(obj.message).filter(([_, v]) => v !== null));\n\n                    this.apiClient!.requestAsync('sound', 'POST', msgFiltered)\n                        .then((response) => {\n                            this.sendTo(obj.from, obj.command, { error: null, data: response.data }, obj.callback);\n                        })\n                        .catch((error) => {\n                            this.sendTo(obj.from, obj.command, { error }, obj.callback);\n                        });\n                } else {\n                    this.sendTo(obj.from, obj.command, { error: 'API is not connected (device offline ?)' }, obj.callback);\n                }\n            } else if (obj.command === 'rtttl' && typeof obj.message === 'string') {\n                // RTTTL sounds\n                this.apiClient!.requestAsync('rtttl', 'POST', obj.message)\n                    .then((response) => {\n                        this.sendTo(obj.from, obj.command, { error: null, data: response.data }, obj.callback);\n                    })\n                    .catch((error) => {\n                        this.sendTo(obj.from, obj.command, { error }, obj.callback);\n                    });\n            } else {\n                this.log.error(`[onMessage] Received incomplete message via \"sendTo\"`);\n\n                if (obj.callback) {\n                    this.sendTo(obj.from, obj.command, { error: 'Incomplete message' }, obj.callback);\n                }\n            }\n        } else if (obj.callback) {\n            this.sendTo(obj.from, obj.command, { error: 'Invalid message' }, obj.callback);\n        }\n    }\n\n    private async setApiConnected(connection: boolean): Promise<void> {\n        if (connection !== this.apiConnected) {\n            await this.setStateChangedAsync('info.connection', { val: connection, ack: true });\n            this.apiConnected = connection;\n\n            if (connection) {\n                // API was offline - refresh all states\n                this.log.debug('API is online');\n\n                try {\n                    // welcome (ioBroker icon)\n                    this.apiClient!.requestAsync('notify', 'POST', {\n                        duration: 2,\n                        draw: [\n                            {\n                                dc: [16, 4, 3, '#164477'], // [x, y, r, cl] Draw a circle with center at (x, y), radius r, and color cl\n                                dl: [16, 3, 16, 8, '#3399cc'], // [x0, y0, x1, y1, cl] Draw a line from (x0, y0) to (x1, y1) with color cl\n                                dp: [16, 1, '#3399cc'], // [x, y, cl] Draw a pixel at position (x, y) with color cl\n                            },\n                        ],\n                    }).catch((error) => {\n                        this.log.warn(error);\n                    });\n\n                    // settings\n                    await this.refreshSettings();\n                    await this.refreshBackgroundEffects();\n                    await this.refreshTransitions();\n\n                    // apps\n                    await this.createAppObjects();\n\n                    for (const app of this.apps) {\n                        if (app instanceof AppTypeUser.UserApp) {\n                            if (await app.init()) {\n                                await app.refresh();\n                            }\n                        }\n                    }\n\n                    // indicators\n                    for (let i = 1; i <= 3; i++) {\n                        await this.updateIndicatorByStates(i);\n                    }\n\n                    // moodlight\n                    await this.updateMoodlightByStates();\n\n                    if (this.config.downloadScreenContent && !this.downloadScreenContentInterval) {\n                        this.log.debug(`[setApiConnected] Downloading screen contents every ${this.config.downloadScreenContentInterval} seconds`);\n\n                        this.downloadScreenContentInterval = this.setInterval(() => {\n                            if (this.apiClient!.isConnected()) {\n                                this.apiClient!.requestAsync('screen', 'GET')\n                                    .then(async (response) => {\n                                        if (response.status === 200) {\n                                            const pixelData = response.data;\n                                            const width = 640;\n                                            const height = 160;\n                                            const scaleX = width / 32;\n                                            const scaleY = height / 8;\n\n                                            let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 640 160\">`;\n\n                                            for (let y = 0; y < 8; y++) {\n                                                for (let x = 0; x < 32; x++) {\n                                                    const color = rgb565to888Str(pixelData[y * 32 + x]);\n                                                    svg += `\\n  <rect style=\"fill: ${color}; stroke: #000000; stroke-width: 2px;\" `;\n                                                    svg += `x=\"${x * scaleX}\" y=\"${y * scaleY}\" width=\"${scaleX}\" height=\"${scaleY}\"/>`;\n                                                }\n                                            }\n\n                                            svg += '\\n</svg>';\n\n                                            await this.setStateAsync('display.content', { val: svg, ack: true });\n                                        }\n                                    })\n                                    .catch((error) => {\n                                        this.log.debug(`(screen) received error: ${JSON.stringify(error)}`);\n                                    });\n                            }\n                        }, this.config.downloadScreenContentInterval * 1000);\n                    } else {\n                        await this.setStateAsync('display.content', { val: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"640\" height=\"160\"/>`, ack: true, c: 'Feature disabled', q: 0x01 });\n                    }\n                } catch (error) {\n                    this.log.error(`[setApiConnected] Unable to refresh settings, apps or indicators: ${error}`);\n                }\n            } else {\n                if (this.downloadScreenContentInterval) {\n                    this.clearInterval(this.downloadScreenContentInterval);\n                    this.downloadScreenContentInterval = undefined;\n                }\n\n                this.log.debug('API is offline');\n            }\n        }\n    }\n\n    private refreshState(): void {\n        this.log.debug('refreshing device state');\n\n        this.apiClient!.getStatsAsync()\n            .then(async (content) => {\n                await this.setApiConnected(true);\n\n                this.currentVersion = String(content.version);\n\n                if (this.isNewerVersion(this.currentVersion, this.supportedVersion) && !this.displayedVersionWarning) {\n                    this.registerNotification('awtrix-light', 'deviceUpdate', `Firmware update: ${this.currentVersion} -> ${this.supportedVersion}`);\n\n                    this.log.warn(`You should update your Awtrix Light - supported version of this adapter is ${this.supportedVersion} (or later). Your current version is ${this.currentVersion}`);\n                    this.displayedVersionWarning = true; // Just show once\n                }\n\n                await this.setStateChangedAsync('meta.uid', { val: content.uid, ack: true });\n                await this.setStateChangedAsync('meta.version', { val: content.version, ack: true });\n\n                await this.setStateChangedAsync('sensor.lux', { val: parseInt(content.lux), ack: true });\n                await this.setStateChangedAsync('sensor.temp', { val: parseInt(content.temp), ack: true });\n                await this.setStateChangedAsync('sensor.humidity', { val: parseInt(content.hum), ack: true });\n\n                await this.setStateChangedAsync('display.brightness', { val: content.bri, ack: true });\n\n                await this.setStateChangedAsync('device.battery', { val: content.bat, ack: true });\n                await this.setStateChangedAsync('device.ipAddress', { val: content.ip_address, ack: true });\n                await this.setStateChangedAsync('device.wifiSignal', { val: content.wifi_signal, ack: true });\n                await this.setStateChangedAsync('device.freeRAM', { val: content.ram, ack: true });\n                await this.setStateChangedAsync('device.uptime', { val: parseInt(content.uptime), ack: true });\n            })\n            .catch((error) => {\n                this.currentVersion = undefined;\n\n                this.log.debug(`(stats) received error - API is now offline: ${JSON.stringify(error)}`);\n                this.setApiConnected(false);\n            });\n\n        this.log.debug('re-creating refresh state timeout');\n        this.refreshStateTimeout =\n            this.refreshStateTimeout ||\n            this.setTimeout(() => {\n                this.refreshStateTimeout = undefined;\n                this.refreshState();\n            }, 60 * 1000);\n    }\n\n    private async refreshSettings(): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            this.apiClient!.requestAsync('settings', 'GET')\n                .then(async (response) => {\n                    if (response.status === 200) {\n                        const content = response.data;\n\n                        const settingsStates = await this.getObjectViewAsync('system', 'state', {\n                            startkey: `${this.namespace}.settings.`,\n                            endkey: `${this.namespace}.settings.\\u9999`,\n                        });\n\n                        // Find all available settings objects with settingsKey\n                        const knownSettings: { [key: string]: { id: string; role: string } } = {};\n                        for (const settingsObj of settingsStates.rows) {\n                            if (settingsObj.value?.native?.settingsKey) {\n                                knownSettings[settingsObj.value.native.settingsKey] = {\n                                    id: this.removeNamespace(settingsObj.id),\n                                    role: settingsObj.value.common.role,\n                                };\n                            }\n                        }\n\n                        const unknownSettings = [];\n\n                        for (const [settingsKey, val] of Object.entries(content)) {\n                            if (Object.prototype.hasOwnProperty.call(knownSettings, settingsKey)) {\n                                if (knownSettings[settingsKey].role === 'level.color.rgb') {\n                                    const newVal = rgb565to888Str(val as number);\n                                    this.log.debug(`[refreshSettings] updating settings value \"${knownSettings[settingsKey].id}\" to ${newVal} (converted from ${val})`);\n\n                                    await this.setStateChangedAsync(knownSettings[settingsKey].id, { val: newVal, ack: true, c: 'Updated from API (converted from RGB565)' });\n                                } else {\n                                    this.log.debug(`[refreshSettings] updating settings value \"${knownSettings[settingsKey].id}\" to ${val}`);\n\n                                    await this.setStateChangedAsync(knownSettings[settingsKey].id, { val: val as string | number, ack: true, c: 'Updated from API' });\n                                }\n                            } else {\n                                unknownSettings.push(settingsKey);\n                            }\n                        }\n\n                        this.log.debug(`[refreshSettings] Missing setting objects for keys: ${JSON.stringify(unknownSettings)}`);\n                    }\n\n                    resolve(response.status);\n                })\n                .catch((error) => {\n                    this.log.warn(`(settings) Received error: ${JSON.stringify(error)}`);\n\n                    reject(error);\n                });\n        });\n    }\n\n    private async refreshBackgroundEffects(): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.apiClient!.requestAsync('effects')\n                .then((response) => {\n                    if (response.status === 200) {\n                        this.log.debug(`[refreshBackgroundEffects] Existing effects \"${JSON.stringify(response.data)}\"`);\n\n                        this.backgroundEffects = response.data;\n\n                        resolve(true);\n                    } else {\n                        reject(`${response.status}: ${response.data}`);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    private async refreshTransitions(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.apiClient!.requestAsync('transitions')\n                .then((response) => {\n                    if (response.status === 200) {\n                        this.log.debug(`[refreshTransitions] Existing transitions \"${JSON.stringify(response.data)}\"`);\n\n                        const states: { [key: string]: string } = {};\n                        for (let i = 0; i < response.data.length; i++) {\n                            states[i] = response.data[i];\n                        }\n\n                        this.extendObjectAsync('settings.appTransitionEffect', {\n                            common: {\n                                states,\n                            },\n                        }).then(() => {\n                            resolve();\n                        });\n                    } else {\n                        reject(`${response.status}: ${response.data}`);\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    private findAppWithName(name: string): AppTypeAbstract.AbstractApp | undefined {\n        return this.apps.find((app) => app.getName() === name);\n    }\n\n    private async createAppObjects(): Promise<number> {\n        return new Promise<number>((resolve, reject) => {\n            if (this.apiClient!.isConnected()) {\n                this.apiClient!.requestAsync('apps', 'GET')\n                    .then(async (response) => {\n                        if (response.status === 200) {\n                            const content = response.data as Array<{ name: string }>;\n\n                            const customApps = this.config.customApps.map((a) => a.name);\n                            const historyApps = this.config.historyApps.map((a) => a.name);\n                            const expertApps = this.config.expertApps.map((a) => a.name);\n                            const existingApps = content.map((a) => a.name);\n                            const allApps = [...NATIVE_APPS, ...customApps, ...historyApps, ...expertApps];\n\n                            this.log.debug(`[createAppObjects] existing apps on awtrix light: ${JSON.stringify(existingApps)}`);\n\n                            const appsAll = [];\n                            const appsKeep = [];\n\n                            // Collect all existing apps from objects\n                            const existingChannels = await this.getChannelsOfAsync('apps');\n                            if (existingChannels) {\n                                for (const existingChannel of existingChannels) {\n                                    const id = this.removeNamespace(existingChannel._id);\n\n                                    // Check if the state is a direct child (e.g. apps.temp)\n                                    if (id.split('.').length === 2) {\n                                        appsAll.push(id);\n                                    }\n                                }\n                            }\n\n                            // Create new app structure for all native apps and apps of instance configuration\n                            for (const name of allApps) {\n                                appsKeep.push(`apps.${name}`);\n                                this.log.debug(`[createAppObjects] found (keep): apps.${name}`);\n\n                                const isNativeApp = NATIVE_APPS.includes(name);\n                                const isCustomApp = customApps.includes(name);\n                                const isHistoryApp = historyApps.includes(name);\n                                const isExpertApp = expertApps.includes(name);\n\n                                const app = this.findAppWithName(name);\n                                if (app) {\n                                    await this.extendObjectAsync(`apps.${name}`, {\n                                        type: 'channel',\n                                        common: {\n                                            name: `App ${name}`,\n                                            desc: `${app.getDescription()} app`,\n                                        },\n                                        native: {\n                                            isNativeApp,\n                                            isCustomApp,\n                                            isHistoryApp,\n                                            isExpertApp,\n                                        },\n                                    });\n\n                                    await app.createObjects();\n                                }\n                            }\n\n                            // Delete non existent apps\n                            for (const app of appsAll) {\n                                if (!appsKeep.includes(app)) {\n                                    await this.delObjectAsync(app, { recursive: true });\n                                    this.log.debug(`[createAppObjects] deleted: ${app}`);\n                                }\n                            }\n\n                            if (this.config.autoDeleteForeignApps) {\n                                // Delete unknown apps on awtrix light\n                                for (const name of existingApps.filter((a) => !allApps.includes(a))) {\n                                    this.log.info(`[createAppObjects] Deleting unknown app on awtrix light with name \"${name}\"`);\n\n                                    try {\n                                        await this.apiClient!.removeAppAsync(name).catch((error) => {\n                                            this.log.warn(`Unable to remove unknown app \"${name}\": ${error}`);\n                                        });\n                                    } catch (error) {\n                                        this.log.error(`[createAppObjects] Unable to delete unknown app ${name}: ${error}`);\n                                    }\n                                }\n                            }\n\n                            resolve(appsKeep.length);\n                        } else {\n                            this.log.warn(`[createAppObjects] received status code: ${response.status}`);\n\n                            reject(`received status code: ${response.status}`);\n                        }\n                    })\n                    .catch((error) => {\n                        this.log.debug(`[createAppObjects] received error: ${JSON.stringify(error)}`);\n\n                        reject(error);\n                    });\n            } else {\n                reject('API_OFFLINE');\n            }\n        });\n    }\n\n    private async updateIndicatorByStates(index: number): Promise<AxiosResponse> {\n        this.log.debug(`Updating indicator with index ${index}`);\n\n        const indicatorStates = await this.getStatesAsync(`indicator.${index}.*`);\n        const indicatorValues: { [key: string]: ioBroker.StateValue } = Object.entries(indicatorStates).reduce(\n            (acc, [objId, state]) => ({\n                ...acc,\n                [this.removeNamespace(objId)]: state.val,\n            }),\n            {},\n        );\n\n        const postObj: AwtrixApi.Indicator = {\n            color: indicatorValues[`indicator.${index}.color`] as string,\n        };\n\n        if (postObj.color !== '0') {\n            const blink = indicatorValues[`indicator.${index}.blink`] as number;\n            if (blink > 0) {\n                postObj.blink = blink;\n            } else {\n                const fade = indicatorValues[`indicator.${index}.fade`] as number;\n                postObj.fade = fade;\n            }\n        }\n\n        return this.apiClient!.indicatorRequestAsync(index, indicatorValues[`indicator.${index}.active`] ? postObj : undefined);\n    }\n\n    private async updateMoodlightByStates(): Promise<AxiosResponse> {\n        this.log.debug(`Updating moodlight`);\n\n        const moodlightStates = await this.getStatesAsync('display.moodlight.*');\n        const moodlightValues: { [key: string]: ioBroker.StateValue } = Object.entries(moodlightStates).reduce(\n            (acc, [objId, state]) => ({\n                ...acc,\n                [this.removeNamespace(objId)]: state.val,\n            }),\n            {},\n        );\n\n        const postObj: AwtrixApi.Moodlight = {\n            brightness: moodlightValues['display.moodlight.brightness'] as number,\n            color: String(moodlightValues['display.moodlight.color']).toUpperCase(),\n        };\n\n        return this.apiClient!.requestAsync('moodlight', 'POST', moodlightValues['display.moodlight.active'] ? postObj : undefined);\n    }\n\n    public removeNamespace(id: string): string {\n        const re = new RegExp(this.namespace + '*\\\\.', 'g');\n        return id.replace(re, '');\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            for (const app of this.apps) {\n                if (app instanceof AppTypeUser.UserApp) {\n                    await app.unloadAsync();\n                }\n            }\n\n            await this.setApiConnected(false);\n\n            if (this.refreshStateTimeout) {\n                this.log.debug('clearing refresh state timeout');\n                this.clearTimeout(this.refreshStateTimeout);\n            }\n\n            if (this.downloadScreenContentInterval) {\n                this.clearInterval(this.downloadScreenContentInterval);\n                this.downloadScreenContentInterval = undefined;\n            }\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private isNewerVersion(oldVer: string, newVer: string): boolean {\n        const oldParts = oldVer.split('.');\n        const newParts = newVer.split('.');\n        for (let i = 0; i < newParts.length; i++) {\n            const a = ~~newParts[i]; // parse int\n            const b = ~~oldParts[i]; // parse int\n            if (a > b) return true;\n            if (a < b) return false;\n        }\n        return false;\n    }\n\n    private getSentryObject(): any {\n        if (this.supportsFeature && this.supportsFeature('PLUGINS')) {\n            const sentryInstance = this.getPluginInstance('sentry');\n            if (sentryInstance) {\n                return sentryInstance.getSentryObject();\n            }\n        }\n\n        return undefined;\n    }\n\n    public addSentryMessage(msg: string): void {\n        const sentryObj = this.getSentryObject();\n\n        if (sentryObj) {\n            sentryObj.withScope((scope: any) => {\n                if (this.currentVersion) {\n                    scope.setTag('firmwareVersion', this.currentVersion || 'unknown');\n                }\n\n                sentryObj.captureMessage(msg, 'info');\n            });\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new AwtrixLight(options);\n} else {\n    // otherwise start the instance directly\n    (() => new AwtrixLight())();\n}\n"],
  "mappings": "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",
  "names": ["AppTypeNative", "AppTypeCustom", "AppTypeHistory", "AppTypeExpert", "AppTypeUser"]
}
